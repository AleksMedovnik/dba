SELECT datname FROM pg_database;
\dt;



# посмотреть все схемы
SELECT schema_name FROM information_schema.schemata;

# какой схеме принадлежит таблица users? 
SELECT table_schema, table_name 
FROM information_schema.tables 
WHERE table_name = 'users'

#  Вывести все таблицы во всех схемах
SELECT table_schema, table_name FROM information_schema.tables
WHERE table_type = 'BASE TABLE';

# вывести таблицы из определенной схемы
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'имя_схемы';

# вывести данные из таблицы в определённой схеме
SELECT * FROM имя_схемы.имя_таблицы;

# Проверить существующие политики
SELECT * FROM pg_policies WHERE policyname = 'select_all';

# Проверка прав пользователя на уровне схемы
SELECT grantee, table_schema, table_name, privilege_type 
FROM information_schema.role_table_grants 
WHERE grantee = 'имя_пользователя' 
AND table_schema = 'public';

##########################################
create database users_db;
drop database users_db;

create table product (
id serial primary key,
title character varying(30),
price integer, # 
info text
);

insert into users (name, age) values
('Иван', 21), ('Маша', 22);

DELETE FROM Products
WHERE Manufacturer='Apple';

alter table students
add faculty character varying(30);

update product
set image = 'images/photo1.png';

ALTER TABLE product
DROP COLUMN image;

select * from users;
select distinct name from users;

select name, age from users
where age >= 30;

select name, age from users
where age >= 30 ORDER BY age desc;

select name, age from users
where age >= 30 and age <= 50;

select name, age from users
where age between 30 and 50;

select name, age from users
where age = 30 or age = 50;

select name, age from users
where age in (30, 50);

select * from users
where name not in ('Анна', 'Марина', 'Андрон');

select * from users limit 5 offset 5;

select * from users
where name like '%а%а%';
select * from users
where name like '_аша';

select avg(age) aver_age from users;
select count(id) user from users;
select max(age) from users;
select min(age) from users;
select sum(age) from users;

select name from users
group by name, age
having count(id) > 1;

select * from users
where age = (
select max(age) from users
);


create table posts_tags(
id serial primary key,
post_id integer references posts(id) on delete cascade,
tag_id integer references tags(id) on delete cascade);


select u.*, g.grade from users u join grades g
on u.id = g.user_id;
select u.*, g.grade from users u inner join grades g
on u.id = g.user_id;
select u.*, g.grade from users u left join grades g
on u.id = g.user_id;
select u.*, g.grade from users u right join grades g
on u.id = g.user_id;
select u.*, g.grade from users u full join grades g
on u.id = g.user_id;

select u.*, g.grade, s.faculty
from users u
join
grades g
on u.id = g.user_id
join
students s
on u.id = s.user_id
where g.grade = 3;

SELECT user_id
FROM students
UNION
SELECT user_id
FROM grades;

SELECT user_id
FROM students
except
SELECT user_id
FROM grades;

SELECT user_id
FROM students
INTERSECT
SELECT user_id
FROM grades;


begin;
update grades set grade = 3
where user_id = 1;
update grades set grade = 1
where user_id = 3;
commit;

# Посмотреть список пользователей
SELECT * FROM pg_roles;

# Посмотреть права пользователя
SELECT grantee, privilege_type FROM information_schema.role_table_grants 
WHERE grantee = 'user_name';

# Вывести текущего пользователя
SELECT current_user;

# Роль	                    Описание
pg_database_owner	        Владелец текущей базы данных (создаётся автоматически).
pg_read_all_data	        Может читать все таблицы во всех схемах.
pg_write_all_data	        Может изменять данные во всех таблицах.
pg_monitor	                Может выполнять мониторинг работы сервера.
pg_read_all_settings	    Может читать настройки сервера PostgreSQL.
pg_read_all_stats	        Может просматривать статистику работы БД.
pg_signal_backend	        Может завершать процессы других пользователей.
pg_execute_server_program	Может запускать серверные программы.

# Привилегия	Описание
SUPERUSER	Полный контроль над системой, игнорирует все ограничения.
CREATEDB	Позволяет создавать базы данных.
CREATEROLE	Позволяет создавать и управлять ролями (но без SUPERUSER).
REPLICATION	Позволяет подключаться к серверу для репликации.
BYPASSRLS	Позволяет игнорировать политику Row-Level Security (RLS).

# роли конкретного пользователя
SELECT rolname FROM pg_roles WHERE rolname = 'admin';

# является ли user_name суперпользователем
SELECT rolname, rolsuper FROM pg_roles WHERE rolname = 'admin';

# Посмотреть все атрибуты роли admin:
SELECT * FROM pg_roles WHERE rolname = 'admin';
# Поле	        Значение	Описание
rolname	        'admin'	    Имя роли (пользователя).
rolsuper	    True	    Суперпользователь (имеет полный доступ ко всей БД).
rolinherit	    True	    Наследует права от других ролей.
rolcreaterole	True	    Может создавать/удалять роли.
rolcreatedb	    True	    Может создавать базы данных.
rolcanlogin	    True	    Может входить в систему (если False, это просто группа ролей).
rolreplication	True	    Может управлять репликацией (логическая/физическая).
rolbypassrls	-1	        Пропускает Row-Level Security (обычно 0 или 1). -1 означает, что флаг отключен.
rolpassword	    '********'	Хеш пароля (скрыт, хранится в pg_shadow).
rolvaliduntil	None	    Срок действия пароля (если NULL, действует вечно).
rolmembership	True	    Возможно, указывает, что роль состоит в какой-то группе.
rolconfig	    None	    Пользовательские конфигурации (например, SET search_path).
oid	            10	        Внутренний идентификатор роли в pg_roles.

# Проверка, кто владелец базы
SELECT datname, datdba, rolname 
FROM pg_database 
JOIN pg_roles ON pg_database.datdba = pg_roles.oid;

# Старый суперпользователь (или root-доступ к серверу) создает DBA-аккаунт
CREATE ROLE dba_admin WITH SUPERUSER LOGIN PASSWORD 'hlsdjien136powej%^$';

# Лишение старого суперпользователя SUPERUSER
ALTER ROLE old_admin WITH NOSUPERUSER;

# является ли пользователь суперпользователем в PostgreSQL?
SELECT rolname, rolsuper 
FROM pg_roles 
WHERE rolname = 'имя_пользователя';

# Вывести всех суперпользователей
SELECT rolname FROM pg_roles WHERE rolsuper = true;

# выдать пользователю права CREATEROLE CREATEDB REPLICATION (пример ролей)
ALTER ROLE username CREATEROLE CREATEDB REPLICATION;

# лишить пользователя прав CREATEROLE CREATEDB REPLICATION (пример ролей)
ALTER ROLE username NOCREATEROLE NOCREATEDB NOREPLICATION;

# Изменить пароль пользователя
ALTER ROLE username WITH PASSWORD 'new_secure_password';

# Изменить имя пользователя
ALTER ROLE old_name RENAME TO new_name;

# Настройка Row-Level Security
# Включить RLS для таблицы
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

# Создаём нового пользователя с паролем
CREATE ROLE reporter WITH LOGIN PASSWORD 'kjdwei'a26883^%$hfd';

# выдать пользователю права на SELECT из всех таблиц схемы public
GRANT USAGE ON SCHEMA public TO readonly_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user;

# Проверка политик RLS
SELECT nspname AS schema_name,
       relname AS table_name,
       polname AS policy_name,
       polpermissive,
       polroles,
       polcmd,
       polqual,
       polwithcheck
FROM pg_policy p
JOIN pg_class c ON c.oid = p.polrelid
JOIN pg_namespace n ON n.oid = c.relnamespace;

# Отозвать доступ ко всем схемам
REVOKE ALL ON DATABASE your_database_name FROM your_user_name;

# Проверка прав пользователя
SELECT * FROM information_schema.table_privileges WHERE grantee = 'reporter';

# Отозвать права на чтение системных каталогов
REVOKE SELECT ON pg_roles FROM ваш_пользователь;

# pg_read_all_data: 
Позволяет читать все данные (таблицы, представления, последовательности).

-- Отозвать роль pg_read_all_data у пользователя
REVOKE pg_read_all_data FROM reporter;

# Дать доступ только на чтение таблиц в схеме public
GRANT USAGE ON SCHEMA public TO reporter;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO reporter;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reporter;

# проверить, какие роли связаны с reporter
SELECT grantee, privilege_type, grantor 
FROM information_schema.role_table_grants 
WHERE grantee = 'reporter';

# не включена ли у reporter настройка INHERIT
SELECT rolname, rolinherit FROM pg_roles WHERE rolname = 'reporter';

# отключить rolinherit
ALTER ROLE reporter NOINHERIT;

# Ограничьте доступ к системным таблицам
REVOKE SELECT ON pg_roles, pg_authid, pg_user FROM reporter;

# Ограничьте доступ к другим схемам
REVOKE USAGE ON SCHEMA admin_schema, private FROM reporter;

# Запретить доступ всем (PUBLIC)
REVOKE SELECT ON pg_roles FROM PUBLIC;

# Выдать права на все существующие таблицы
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO username;

# Автоматически выдавать права на новые таблицы
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO username;

##########################################################
##########################################################
##########################################################

-- Создание пользователей без доступа ни к каким БД и схемам
CREATE ROLE user_name WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT;

-- создание с паролем
CREATE ROLE user_name WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT PASSWORD 'your_secure_password';

-- Выдать developer доступ только к конкретным БД
GRANT CONNECT ON DATABASE my_database TO developer;

-- Разрешить developer использовать схему public
GRANT USAGE ON SCHEMA public TO developer;  

-- Выдать права на таблицы только в public
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO developer;

-- Дать права на будущие таблицы
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO developer;

-- право на создание объектов (CREATE) в схеме public
GRANT CREATE ON SCHEMA public TO username;

-- выдать права на SEQUENCE для автоинкрементных полей (SERIAL, BIGSERIAL)
GRANT USAGE, SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA public TO username;

-- Запретить доступ ко всем другим схемам, кроме public
DO $$ 
DECLARE schema_name TEXT; 
BEGIN 
    FOR schema_name IN (SELECT nspname FROM pg_namespace WHERE nspname NOT IN ('public', 'pg_catalog', 'information_schema')) 
    LOOP 
        EXECUTE format('REVOKE USAGE ON SCHEMA %I FROM developer, reporter', schema_name); 
    END LOOP; 
END $$;

-- Запретить просмотр системных таблиц (pg_class, pg_namespace)
REVOKE SELECT ON pg_catalog.pg_class FROM developer;
REVOKE SELECT ON pg_catalog.pg_namespace FROM developer;
REVOKE SELECT ON information_schema.tables FROM developer;

-- Запретить доступ к pg_roles
CREATE VIEW filtered_pg_roles AS 
SELECT * FROM pg_roles WHERE rolname = current_user;

REVOKE SELECT ON pg_roles FROM public;
GRANT SELECT ON filtered_pg_roles TO developer;

-- посмотреть все системные каталоги
SELECT tablename 
FROM pg_catalog.pg_tables 
WHERE schemaname = 'pg_catalog' 
ORDER BY tablename;

-- запретить доступ к системным каталогам пользователю
REVOKE SELECT ON ALL TABLES IN SCHEMA pg_catalog FROM username;

